<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.magicdgs</groupId>
  <artifactId>gatkct</artifactId>
  <packaging>jar</packaging>
  <version>${project.parent.version}</version>
  <name>GATKCT</name>
  <description>GATK Custom Tools</description>

  <parent>
    <groupId>org.magicdgs</groupId>
    <artifactId>gatkc-parent</artifactId>
    <version>0.0.0-SNAPSHOT</version>
  </parent>

  <inceptionYear>2016</inceptionYear>
  <licenses>
    <license>
      <name>MIT License</name>
      <url>http://www.opensource.org/licenses/mit-license.php</url>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>${developer.main}</name>
      <email>${developer.main.email}</email>
      <roles>
        <role>Programmer</role>
        </roles>
    </developer>
    <!-- TODO: add developers -->
  </developers>

  <!-- fake scm connection for make work the buildnumber-maven-plugin: TODO: change to the repo -->
  <scm>
    <connection>scm:git:http://none</connection>
    <url>scm:git:https://none</url>
  </scm>

  <!-- PROJECT PROPERTIES AND REPOSITORIES -->
  <properties>
    <!-- this is for allow skip buildnumber from the command line when developing -->
    <skip.buildnumber>false</skip.buildnumber>
    <!-- java versions and encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.java.version>1.8</project.java.version>
    <!-- DEPENDENCY VERSIONS -->
    <gatk.version>3.5</gatk.version>
    <junit.version>4.12</junit.version>
    <!-- maven plugin versions -->
    <maven.jar.plugin>2.4</maven.jar.plugin>
    <maven.compiler.plugin>3.3</maven.compiler.plugin>
    <maven.clean.plugin>2.6.1</maven.clean.plugin>
    <maven.buildnumber.plugin>1.4</maven.buildnumber.plugin>
    <maven.build.helper.plugin>1.9</maven.build.helper.plugin>
    <maven.shade.plugin>2.4.3</maven.shade.plugin>
    <!-- distribution properties -->
    <dist.folder>../bin</dist.folder>
    <!-- TODO: change Main class -->
    <main.class>${project.groupId}.${project.artifactId}.Main</main.class>
    <program.name>${project.name}</program.name>
    <program.version>${program.majorVersion}.${program.minorVersion}.${program.incrementalVersion}</program.version>
    <developer.main>Daniel Gomez-Sanchez</developer.main>
    <developer.main.email>daniel.gomez.sanchez@hotmail.es</developer.main.email>
  </properties>

  <!-- DEPENDENCIES -->
  <dependencies>
    <!-- junit for testing -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- DEPENDENCIES FROM GATK3: should be loaded independently -->
    <dependency>
      <groupId>org.broadinstitute.gatk</groupId>
      <artifactId>gatk-utils</artifactId>
      <version>${gatk.version}</version>
    </dependency>

    <dependency>
      <groupId>org.broadinstitute.gatk</groupId>
      <artifactId>gatk-engine</artifactId>
      <version>${gatk.version}</version>
    </dependency>

  </dependencies>

  <!-- BUILDING -->
  <build>

    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.prop</include>
        </includes>
      </resource>
    </resources>

    <plugins>

      <!-- Maven Compiler Pluging -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin}</version>
        <configuration>
          <source>${project.java.version}</source>
          <target>${project.java.version}</target>
        </configuration>
      </plugin>

      <!-- Maven Jar Pluging -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven.jar.plugin}</version>
        <configuration>
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <!-- Parse the version and remove SNAPSHOT tag -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${maven.build.helper.plugin}</version>
        <configuration>
          <propertyPrefix>program</propertyPrefix>
        </configuration>
        <executions>
          <execution>
            <id>parse-version</id>
            <goals>
              <goal>parse-version</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- This is for the build number in the variable ${buildNumber} -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>buildnumber-maven-plugin</artifactId>
        <version>${maven.buildnumber.plugin}</version>
        <executions>
          <execution>
            <phase>validate</phase>
            <goals>
              <goal>create</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <skip>${skip.buildnumber}</skip>
          <shortRevisionLength>8</shortRevisionLength>
          <!-- This ensures that even if we are not connected to scm than also take the version from local .svn file -->
          <revisionOnScmFailure></revisionOnScmFailure>
          <useLastCommittedRevision>true</useLastCommittedRevision>
          <timestampFormat>{0,date,yyyy-MM-dd HH:mm:ss}</timestampFormat>
          <doCheck>true</doCheck>
          <doUpdate>false</doUpdate>
        </configuration>
      </plugin>

      <!-- Maven Shade Plugin for add dependencies to jar -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven.shade.plugin}</version>
        <executions>
          <!-- Run shade goal on package phase -->
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <!-- output in the distribution directory with only the project name and the version -->
              <outputDirectory>${project.basedir}/${dist.folder}</outputDirectory>
              <finalName>${project.name}-${program.version}</finalName>
              <!-- Example of how to exclude dependencies -->
              <!-- TODO: remove when finish -->
              <artifactSet>
                <excludes>
                  <!-- do not unpack gsalib -->
                  <exclude>org.broadinstitute.gatk:gsalib:tar.gz:*</exclude>
                  <!--
                  <exclude>log4j:log4j:jar:</exclude>
                  <exclude>org.slf4j:slf4j-log4j12</exclude>
                -->
                </excludes>
              </artifactSet>
              <transformers>
                <!-- add Main-Class to manifest file -->
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>${main.class}</mainClass>
                </transformer>
              </transformers>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <!-- For Mac OS case-insensitive issue when trying to decompress: META-INF/LICENSE (file) and META-INF/license (folder) -->
                    <exclude>META-INF/LICENSE</exclude>
                    <!-- Exlude for avoid SecurityException: Invalid signature file digest for Manifest main attributes -->
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                   <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <!-- minimize the jar to avoid a huge fat-jar -->
              <!-- TODO: minimized is not working for the Main class (it complains at the end -->
              <minimizeJar>false</minimizeJar>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Maven Clean Pluging for remove the distributon folder -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${maven.clean.plugin}</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>${dist.folder}</directory>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>
    
    </plugins>

  </build>


</project>
